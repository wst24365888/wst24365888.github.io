<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xyphuz&#39;s Notes</title>
  <icon>https://www.gravatar.com/avatar/1aec3d61336b01cb1da20daecd02d8c5</icon>
  <subtitle>Home</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wst24365888.github.io/"/>
  <updated>2019-10-21T12:45:58.000Z</updated>
  <id>http://wst24365888.github.io/</id>
  
  <author>
    <name>Xyphuz</name>
    <email>xyphuzwu@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flutter中滑動以刪除列表物件</title>
    <link href="http://wst24365888.github.io/flutter-swipe-to-delete-list-item/"/>
    <id>http://wst24365888.github.io/flutter-swipe-to-delete-list-item/</id>
    <published>2019-10-21T12:29:56.000Z</published>
    <updated>2019-10-21T12:45:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近開學有點忙阿…</p><p>只能慢慢更新一點小東西QAQ</p><h2 id="用Dismissible包住List-Item"><a href="#用Dismissible包住List-Item" class="headerlink" title="用Dismissible包住List Item"></a>用Dismissible包住List Item</h2><p>這裡使用Flutter原生的Dismissible</p><h3 id="加上key"><a href="#加上key" class="headerlink" title="加上key"></a>加上key</h3><p>每個被Dismissible包住的物件都要有一個獨特的Key，</p><p>以確保Flutter在更新畫面時的比較機制順利進行(之後應該會另外發篇文講)</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart">Dismissible(<br>  key: Key(<span class="hljs-string">&quot;YourKey&quot;</span>),<br>  child: YourListItem(),<br>);<br></code></pre></td></tr></table></figure><h3 id="加上onDismissed"><a href="#加上onDismissed" class="headerlink" title="加上onDismissed"></a>加上onDismissed</h3><p>加上當被滑動時需要做的動作</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dart">Dismissible(<br>  key: Key(<span class="hljs-string">&quot;YourKey&quot;</span>),<br>  onDismissed: (direction) &#123;<br>      <span class="hljs-comment">// Do something...</span><br>  &#125;,<br>  child: YourListItem(),<br>);<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近開學有點忙阿…&lt;/p&gt;
&lt;p&gt;只能慢慢更新一點小東西QAQ&lt;/p&gt;
&lt;h2 id=&quot;用Dismissible包住List-Item&quot;&gt;&lt;a href=&quot;#用Dismissible包住List-Item&quot; class=&quot;headerlink&quot; title=&quot;用Dismis
      
    
    </summary>
    
    
      <category term="Flutter" scheme="http://wst24365888.github.io/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="http://wst24365888.github.io/tags/Flutter/"/>
    
      <category term="Swipe" scheme="http://wst24365888.github.io/tags/Swipe/"/>
    
      <category term="Key" scheme="http://wst24365888.github.io/tags/Key/"/>
    
      <category term="Dismissible" scheme="http://wst24365888.github.io/tags/Dismissible/"/>
    
  </entry>
  
  <entry>
    <title>在Flutter中使用字體</title>
    <link href="http://wst24365888.github.io/flutter-using-font/"/>
    <id>http://wst24365888.github.io/flutter-using-font/</id>
    <published>2019-09-09T09:06:24.000Z</published>
    <updated>2019-09-09T13:29:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="找到你要的字體"><a href="#找到你要的字體" class="headerlink" title="找到你要的字體"></a>找到你要的字體</h2><p>到<a href="https://fonts.google.com/">Google Fonts 官網</a>尋找你要的字體</p><p>下載該字體的安裝包並解壓縮</p><h3 id="觀察檔名"><a href="#觀察檔名" class="headerlink" title="觀察檔名"></a>觀察檔名</h3><p>這裡拿來示範的是<a href="https://fonts.google.com/specimen/Quicksand">Quicksand</a>這個字體</p><p>解壓縮之後</p><p>字體檔的副檔名應該是.ttf, .otf或.ttc</p><p>而檔名的命名規則是”<strong>字體家族名稱-粗細</strong>“</p><p>ex. Quicksand-Bold.ttf</p><h2 id="新建資料夾並移動資料"><a href="#新建資料夾並移動資料" class="headerlink" title="新建資料夾並移動資料"></a>新建資料夾並移動資料</h2><p>在Flutter專案的<strong>根目錄</strong>中</p><p>新建名為fonts的資料夾</p><p>並把剛剛解壓縮裡面的字體檔放進fonts內</p><h2 id="修改pubspec-yaml"><a href="#修改pubspec-yaml" class="headerlink" title="修改pubspec.yaml"></a>修改pubspec.yaml</h2><p>把剛剛放進來的所有字體檔都加到pubspec.yaml中flutter底下的的fonts</p><p>ex.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">flutter:</span><br><br>  <span class="hljs-comment"># ...</span><br><br>  <span class="hljs-attr">fonts:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">family:</span> <span class="hljs-string">Quicksand</span>   <span class="hljs-comment">#這裡填字體家族名稱</span><br>    <span class="hljs-attr">fonts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">asset:</span> <span class="hljs-string">fonts/Quicksand-Bold.ttf</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">asset:</span> <span class="hljs-string">fonts/Quicksand-Light.ttf</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">asset:</span> <span class="hljs-string">fonts/Quicksand-Medium.ttf</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">asset:</span> <span class="hljs-string">fonts/Quicksand-Regular.ttf</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">asset:</span> <span class="hljs-string">fonts/Quicksand-SemiBold.ttf</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">asset:</span> <span class="hljs-string">fonts/Quicksand-VariableFont_wght.ttf</span><br></code></pre></td></tr></table></figure><h2 id="在TextStyle中設定"><a href="#在TextStyle中設定" class="headerlink" title="在TextStyle中設定"></a>在TextStyle中設定</h2><p>大功告成~</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dart">Text(<br>  <span class="hljs-string">&quot;Some Text&quot;</span>,<br>  style: TextStyle(<br>    fontFamily: <span class="hljs-string">&quot;Quicksand&quot;</span>,<br>  )<br>),<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;找到你要的字體&quot;&gt;&lt;a href=&quot;#找到你要的字體&quot; class=&quot;headerlink&quot; title=&quot;找到你要的字體&quot;&gt;&lt;/a&gt;找到你要的字體&lt;/h2&gt;&lt;p&gt;到&lt;a href=&quot;https://fonts.google.com/&quot;&gt;Google Fonts 
      
    
    </summary>
    
    
      <category term="Flutter" scheme="http://wst24365888.github.io/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="http://wst24365888.github.io/tags/Flutter/"/>
    
      <category term="Google Fonts" scheme="http://wst24365888.github.io/tags/Google-Fonts/"/>
    
      <category term="Font" scheme="http://wst24365888.github.io/tags/Font/"/>
    
  </entry>
  
  <entry>
    <title>在Flutter中使用插件(Package)</title>
    <link href="http://wst24365888.github.io/flutter-using-package/"/>
    <id>http://wst24365888.github.io/flutter-using-package/</id>
    <published>2019-09-09T06:41:31.000Z</published>
    <updated>2020-08-02T03:16:33.343Z</updated>
    
    <content type="html"><![CDATA[<p>最近來補點比較基本且常用的東西好了XD</p><h2 id="找到你要的插件"><a href="#找到你要的插件" class="headerlink" title="找到你要的插件"></a>找到你要的插件</h2><p>我這裡使用的範例是<a href="https://pub.dev/packages/provider">provider</a></p><p><img src="066.png"></p><h2 id="修改pubspec-yaml"><a href="#修改pubspec-yaml" class="headerlink" title="修改pubspec.yaml"></a>修改pubspec.yaml</h2><p>在pubspec.yaml加入你剛剛找到的插件名稱</p><p>這裡有幾種寫法</p><h3 id="無版本號"><a href="#無版本號" class="headerlink" title="無版本號"></a>無版本號</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dependencies:</span><br>  <span class="hljs-attr">provider:</span><br></code></pre></td></tr></table></figure><p>我自己偏好這個方法，不過<strong>不推薦</strong></p><p>如果不加入版本號的話</p><p>代表get package時永遠是拉最新版</p><p>但無從查看插件的版本(我看有人說好像在更新時會顯示版本，但我測試是失敗的QQ)</p><h3 id="版本號"><a href="#版本號" class="headerlink" title="^ + 版本號"></a>^ + 版本號</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dependencies:</span><br>  <span class="hljs-attr">provider:</span> <span class="hljs-string">^3.1.0</span><br></code></pre></td></tr></table></figure><p>最常使用的方法</p><p>在get package時任何3.1.x, x&gt;=0皆適用</p><p>但3.2.x則不適用</p><h3 id="‘版本號’"><a href="#‘版本號’" class="headerlink" title="‘版本號’"></a>‘版本號’</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dependencies:</span><br>  <span class="hljs-attr">provider:</span> <span class="hljs-string">&#x27;3.1.0&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>不推薦</strong>，這裡代表只有3.1.0這個版本適用</p><h2 id="執行指令"><a href="#執行指令" class="headerlink" title="執行指令"></a>執行指令</h2><p>執行這段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">flutter pub get<br></code></pre></td></tr></table></figure><p>這裡會根據pubspec.yaml中dependencies寫的插件來更新</p><p>新的會下載下來</p><p>舊的如果版本適用則會更新</p><h3 id="在VS-Code中"><a href="#在VS-Code中" class="headerlink" title="在VS Code中"></a>在VS Code中</h3><p>在VS Code中存檔就會自動執行</p><p>無須再輸入指令</p><h2 id="在你的dart檔案中引入"><a href="#在你的dart檔案中引入" class="headerlink" title="在你的dart檔案中引入"></a>在你的dart檔案中引入</h2><p>除非有特殊需求只引入其中幾個庫</p><p>不然一般都會直接引入該套件底下的”<strong>套件名稱.dart</strong>“</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:provider/provider.dart&#x27;</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近來補點比較基本且常用的東西好了XD&lt;/p&gt;
&lt;h2 id=&quot;找到你要的插件&quot;&gt;&lt;a href=&quot;#找到你要的插件&quot; class=&quot;headerlink&quot; title=&quot;找到你要的插件&quot;&gt;&lt;/a&gt;找到你要的插件&lt;/h2&gt;&lt;p&gt;我這裡使用的範例是&lt;a href=&quot;https
      
    
    </summary>
    
    
      <category term="Flutter" scheme="http://wst24365888.github.io/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="http://wst24365888.github.io/tags/Flutter/"/>
    
      <category term="Pub" scheme="http://wst24365888.github.io/tags/Pub/"/>
    
      <category term="Package" scheme="http://wst24365888.github.io/tags/Package/"/>
    
  </entry>
  
  <entry>
    <title>Just Scan Releases</title>
    <link href="http://wst24365888.github.io/xyphuz-scanner/"/>
    <id>http://wst24365888.github.io/xyphuz-scanner/</id>
    <published>2019-09-06T08:28:10.000Z</published>
    <updated>2020-08-02T03:31:20.484Z</updated>
    
    <content type="html"><![CDATA[<h2 id="最新版本"><a href="#最新版本" class="headerlink" title="最新版本"></a>最新版本</h2><ul><li><p><a href="xyphuz-scanner-version-1.0.0.apk">直接下載最新版本 v1.0.0</a> (2019/09/06 釋出)</p></li><li><p>從<a href="https://play.google.com/store/apps/details?id=com.xyphuz.scanner">Play商店</a>安裝 (因為須審核，所以版本更新上可能較慢)</p></li></ul><h2 id="功能簡介"><a href="#功能簡介" class="headerlink" title="功能簡介"></a>功能簡介</h2><ul><li><p>掃條碼 - 即時的條碼掃描</p></li><li><p>上傳檔案 - 分析檔案中的條碼或文字(文字僅支援拉丁語系)</p></li><li><p>生成條碼 - 以您的文字內容來生成一個新的QR Code</p></li><li><p>檢視結果 - 可以複製結果的文字、也可以在瀏覽器中開啟，並支援分享功能</p></li><li><p>檢視歷史 - 可以查看您所有的歷史結果</p></li><li><p>設定 - 目前可以切換中、英文版本</p></li></ul><h2 id="螢幕截圖"><a href="#螢幕截圖" class="headerlink" title="螢幕截圖"></a>螢幕截圖</h2><p><img src="1.jpg"></p><p><img src="2.jpg"></p><p><img src="3.jpg"></p><p><img src="4.jpg"></p><p><img src="5.jpg"></p><p><img src="6.jpg"></p><p><img src="7.jpg"></p><p><img src="8.jpg"></p><h2 id="歷史版本"><a href="#歷史版本" class="headerlink" title="歷史版本"></a>歷史版本</h2><h3 id="v1-0-0-2019-09-06-釋出"><a href="#v1-0-0-2019-09-06-釋出" class="headerlink" title="v1.0.0 (2019/09/06 釋出)"></a>v1.0.0 (2019/09/06 釋出)</h3><ul><li><p>新稱 - 掃條碼</p></li><li><p>新稱 - 上傳檔案</p></li><li><p>新稱 - 生成條碼</p></li><li><p>新稱 - 檢視結果</p></li><li><p>新稱 - 檢視歷史</p></li><li><p>新稱 - 設定</p></li></ul><p><a href="xyphuz-scanner-version-1.0.0.apk">前往下載v1.0.0</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;最新版本&quot;&gt;&lt;a href=&quot;#最新版本&quot; class=&quot;headerlink&quot; title=&quot;最新版本&quot;&gt;&lt;/a&gt;最新版本&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;xyphuz-scanner-version-1.0.0.apk&quot;&gt;直接下載最新版本 v
      
    
    </summary>
    
    
      <category term="Release" scheme="http://wst24365888.github.io/categories/Release/"/>
    
    
      <category term="Flutter" scheme="http://wst24365888.github.io/tags/Flutter/"/>
    
      <category term="App" scheme="http://wst24365888.github.io/tags/App/"/>
    
      <category term="Release" scheme="http://wst24365888.github.io/tags/Release/"/>
    
      <category term="Just Scan" scheme="http://wst24365888.github.io/tags/Just-Scan/"/>
    
      <category term="QR" scheme="http://wst24365888.github.io/tags/QR/"/>
    
      <category term="QR Code" scheme="http://wst24365888.github.io/tags/QR-Code/"/>
    
      <category term="Barcode" scheme="http://wst24365888.github.io/tags/Barcode/"/>
    
  </entry>
  
  <entry>
    <title>淺談Dart中的Mixin</title>
    <link href="http://wst24365888.github.io/dart-mixin/"/>
    <id>http://wst24365888.github.io/dart-mixin/</id>
    <published>2019-08-11T10:04:22.000Z</published>
    <updated>2020-08-02T03:39:36.383Z</updated>
    
    <content type="html"><![CDATA[<p>本篇純為個人見解，可能還有不少沒理解清楚的地方，歡迎大家提出指正哦！</p><p>-</p><p>這篇本來要跟<a href="https://wst24365888.github.io/dart-extends-and-implements/">上一篇</a>一起寫</p><p>直到我發現Dart中Mixin的觀念其實多到可以自成一篇QQ</p><h2 id="觀念"><a href="#觀念" class="headerlink" title="觀念"></a>觀念</h2><p>先來講講一些觀念:</p><ul><li><p>Mixin是物件導向語言中的一種類，不過每種語言中的Mixin類特性不盡相同</p></li><li><p>Mixin類<strong>自帶方法的實現</strong>，無須依賴子類(當然子類要override也不是不行啦)</p></li><li><p>Mixin類<strong>責任單一</strong>，要寫多種功能請寫多個Mixin類</p></li><li><p>Mixin並非多重繼承(Multiple Inheritance)，也不是接口(Interface)，不過功能上蠻像的</p></li><li><p>在Dart中，可實例化的類與無法實例化的抽象類，都能拿來當作Mixin類</p></li><li><p>在Dart中，可以使用With這個關鍵字Mixin多個Mixin類，但不破壞<strong>單繼承的特性</strong></p></li></ul><p>看完上述這幾點，是不是心裡只有 “<del>馬的，工三小?</del>“</p><h2 id="舉個例子"><a href="#舉個例子" class="headerlink" title="舉個例子"></a>舉個例子</h2><p>接下來的話就來舉個例子好了</p><p>現在有兩種技能: Teach &amp; Drive</p><p>而且有兩種職業: Teacher &amp; Driver</p><p>現在假設這兩個職業都各持有Teach &amp; Drive這兩個技能</p><h3 id="Java-v-s-Dart"><a href="#Java-v-s-Dart" class="headerlink" title="Java v.s. Dart"></a>Java v.s. Dart</h3><p>Java版本:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Human</span> </span>&#123;<br>    <span class="hljs-comment">// Some properties and methods...</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Teach</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">canTeach</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Drive</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">canDrive</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Human</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Teach</span>, <span class="hljs-title">Drive</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">canTeach</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Yes, a human can teach.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">canDrive</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Yes, a human can drive.&quot;</span>);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Driver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Human</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Teach</span>, <span class="hljs-title">Drive</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">canTeach</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Yes, a human can teach.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">canDrive</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Yes, a human can drive.&quot;</span>);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;   <br>  <br>    Teacher teacher = <span class="hljs-keyword">new</span> Teacher();<br>    teacher.canTeach();<br>    teacher.canDrive();<br>  <br>    Driver driver = <span class="hljs-keyword">new</span> Driver();<br>    driver.canTeach();<br>    driver.canDrive();<br><br>&#125;<br></code></pre></td></tr></table></figure><p>Dart版本:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Human</span> </span>&#123; <br>  <span class="hljs-comment">// Some properties and methods...</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teach</span> </span>&#123;<br>  <span class="hljs-keyword">void</span> canTeach() &#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Yes, a human can teach.&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Drive</span> </span>&#123;<br>  <span class="hljs-keyword">void</span> canDrive() &#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Yes, a human can drive.&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Human</span> <span class="hljs-title">with</span> <span class="hljs-title">Teach</span>, <span class="hljs-title">Drive</span> </span>&#123;&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Driver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Human</span> <span class="hljs-title">with</span> <span class="hljs-title">Teach</span>, <span class="hljs-title">Drive</span> </span>&#123;&#125;<br><br><span class="hljs-keyword">void</span> main() &#123;<br>  <br>  Teacher teacher = <span class="hljs-keyword">new</span> Teacher();<br>  teacher.canTeach();<br>  teacher.canDrive();<br>  <br>  Driver driver = <span class="hljs-keyword">new</span> Driver();<br>  driver.canTeach();<br>  driver.canDrive();<br>  <br>&#125;<br></code></pre></td></tr></table></figure><p>輸出均為:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-literal">Yes</span><span class="hljs-string">,</span> <span class="hljs-string">a</span> <span class="hljs-string">human</span> <span class="hljs-string">can</span> <span class="hljs-string">teach.</span><br><span class="hljs-literal">Yes</span><span class="hljs-string">,</span> <span class="hljs-string">a</span> <span class="hljs-string">human</span> <span class="hljs-string">can</span> <span class="hljs-string">drive.</span><br><span class="hljs-literal">Yes</span><span class="hljs-string">,</span> <span class="hljs-string">a</span> <span class="hljs-string">human</span> <span class="hljs-string">can</span> <span class="hljs-string">teach.</span><br><span class="hljs-literal">Yes</span><span class="hljs-string">,</span> <span class="hljs-string">a</span> <span class="hljs-string">human</span> <span class="hljs-string">can</span> <span class="hljs-string">drive.</span><br></code></pre></td></tr></table></figure><p>這裡可以看到在Java版本的兩個職業中，實作方法(技能)時出現重複的程式碼</p><p>而這裡Dart版本中的Mixin類<strong>自帶方法實現</strong>，從而解決了這個問題</p><p>(不過Java 8以上的default method也有同樣的效果)</p><h2 id="使Mixin類無法實例化"><a href="#使Mixin類無法實例化" class="headerlink" title="使Mixin類無法實例化"></a>使Mixin類無法實例化</h2><p>這裡可以使用關鍵字 <code>mixin</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">mixin</span> Teach &#123;<br>  <span class="hljs-comment">// 這裡就是一個標準的Mixin類，無法實例化</span><br>  <span class="hljs-keyword">void</span> canTeach() &#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Yes, a human can teach.&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>或者是改為abstract class</p><p>然後給定該類一個private constructor(dash代表私有)，並設回傳值為 <code>null</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Drive</span> </span>&#123;<br>  <span class="hljs-comment">// 這樣一來Drive既不能擴充也不能實例化了</span><br>  <span class="hljs-keyword">factory</span> Drive._() =&gt; <span class="hljs-keyword">null</span>;<br>  <br>  <span class="hljs-keyword">void</span> canDrive() &#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Yes, a human can drive.&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="mixin-on"><a href="#mixin-on" class="headerlink" title="mixin on"></a>mixin on</h2><p>現在我們修改一下設定</p><p>假設說只有會教書的人能使用Teach這個技能呢?</p><p>這時我們可以用到 <code>mixin on</code> 這個關鍵字</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Human</span> </span>&#123;<br>  <span class="hljs-comment">// Some properties and methods...</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WhoCanTeach</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Human</span> </span>&#123;  <br>  <span class="hljs-comment">// 會教書的人</span><br>&#125;<br><br><span class="hljs-keyword">mixin</span> Teach <span class="hljs-keyword">on</span> WhoCanTeach &#123;<br>  <span class="hljs-comment">// 這裡就指定了只有extends WhoCanTeach或implements WhoCanTeach的類才能with Teach</span><br>  <span class="hljs-keyword">void</span> canTeach() &#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Yes, a teacher can teach.&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Drive</span> </span>&#123;<br>  <span class="hljs-keyword">factory</span> Drive._() =&gt; <span class="hljs-keyword">null</span>;<br>  <br>  <span class="hljs-keyword">void</span> canDrive() &#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Yes, a human can drive.&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WhoCanTeach</span> <span class="hljs-title">with</span> <span class="hljs-title">Teach</span>, <span class="hljs-title">Drive</span> </span>&#123;<br>  <span class="hljs-comment">// Correct.</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Driver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Human</span> <span class="hljs-title">with</span> <span class="hljs-title">Teach</span>, <span class="hljs-title">Drive</span> </span>&#123;<br>  <span class="hljs-comment">// Error: Driver does not implement WhoCanTeach.</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Driver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Human</span> <span class="hljs-title">with</span> <span class="hljs-title">Drive</span> </span>&#123;<br>  <span class="hljs-comment">// Correct.</span><br>&#125;<br><br><span class="hljs-keyword">void</span> main() &#123;<br>  <br>  Teacher teacher = <span class="hljs-keyword">new</span> Teacher();<br>  teacher.canTeach();<br>  teacher.canDrive();<br>  <br>  Driver driver = <span class="hljs-keyword">new</span> Driver();<br>  driver.canDrive();<br>  <br>&#125;<br></code></pre></td></tr></table></figure><p>輸出:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-literal">Yes</span><span class="hljs-string">,</span> <span class="hljs-string">a</span> <span class="hljs-string">teacher</span> <span class="hljs-string">can</span> <span class="hljs-string">teach.</span><br><span class="hljs-literal">Yes</span><span class="hljs-string">,</span> <span class="hljs-string">a</span> <span class="hljs-string">human</span> <span class="hljs-string">can</span> <span class="hljs-string">drive.</span><br><span class="hljs-literal">Yes</span><span class="hljs-string">,</span> <span class="hljs-string">a</span> <span class="hljs-string">human</span> <span class="hljs-string">can</span> <span class="hljs-string">drive.</span><br></code></pre></td></tr></table></figure><h2 id="線性化"><a href="#線性化" class="headerlink" title="線性化"></a>線性化</h2><p>看一下這個例子</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Human</span> </span>&#123;<br>  <span class="hljs-built_in">String</span> getStatus() =&gt; <span class="hljs-string">&quot;Full of energy!&quot;</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>  <span class="hljs-built_in">String</span> getStatus() =&gt; <span class="hljs-string">&quot;I&#x27;m tired!&quot;</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Engineer</span> </span>&#123;<br>  <span class="hljs-built_in">String</span> getStatus() =&gt; <span class="hljs-string">&quot;I&#x27;m dying...&quot;</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Me</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Human</span> <span class="hljs-title">with</span> <span class="hljs-title">Student</span>, <span class="hljs-title">Engineer</span> </span>&#123;&#125;<br><br><span class="hljs-keyword">void</span> main() &#123;<br>  <br>  Me me = <span class="hljs-keyword">new</span> Me();<br>  <span class="hljs-built_in">print</span>(me.getStatus());<br>  <br>&#125;<br></code></pre></td></tr></table></figure><p>好的，這裡究竟會印出什麼東西來呢?</p><p>答案是 “I’m dying…” QQ</p><p>先講結論: <strong>越後面的Mixin類優先級別越高</strong>，等於是倒過來看啦~</p><h3 id="拆解"><a href="#拆解" class="headerlink" title="拆解"></a>拆解</h3><p>上面的東西相當於這樣</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Human</span> </span>&#123;<br>  <span class="hljs-built_in">String</span> getStatus() =&gt; <span class="hljs-string">&quot;Full of energy!&quot;</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>  <span class="hljs-built_in">String</span> getStatus() =&gt; <span class="hljs-string">&quot;I&#x27;m tired!&quot;</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Engineer</span> </span>&#123;<br>  <span class="hljs-built_in">String</span> getStatus() =&gt; <span class="hljs-string">&quot;I&#x27;m dying...&quot;</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HumanWhoIsStudent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Human</span> <span class="hljs-title">with</span> <span class="hljs-title">Student</span> </span>&#123;&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HumanWhoIsStudentAndEngineer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HumanWhoIsStudent</span> <span class="hljs-title">with</span> <span class="hljs-title">Engineer</span> </span>&#123;&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Me</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HumanWhoIsStudentAndEngineer</span> </span>&#123;&#125;<br><br><span class="hljs-keyword">void</span> main() &#123;<br>  <br>  Me me = <span class="hljs-keyword">new</span> Me();<br>  <span class="hljs-built_in">print</span>(me.getStatus());<br>  <br>&#125;<br></code></pre></td></tr></table></figure><p>簡單來說，Mixin像是在實現一條線性的繼承鏈</p><h3 id="實例化後的類型"><a href="#實例化後的類型" class="headerlink" title="實例化後的類型"></a>實例化後的類型</h3><p>一樣是上面的例子</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> main() &#123;<br>  <br>  Me me = <span class="hljs-keyword">new</span> Me();<br>  <span class="hljs-built_in">print</span>(me <span class="hljs-keyword">is</span> Me);<br>  <span class="hljs-built_in">print</span>(me <span class="hljs-keyword">is</span> Engineer);<br>  <span class="hljs-built_in">print</span>(me <span class="hljs-keyword">is</span> Student);<br>  <span class="hljs-built_in">print</span>(me <span class="hljs-keyword">is</span> Human);<br>  <br>&#125;<br></code></pre></td></tr></table></figure><p>輸出:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-literal">true</span><br><span class="hljs-literal">true</span><br><span class="hljs-literal">true</span><br><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇純為個人見解，可能還有不少沒理解清楚的地方，歡迎大家提出指正哦！&lt;/p&gt;
&lt;p&gt;-&lt;/p&gt;
&lt;p&gt;這篇本來要跟&lt;a href=&quot;https://wst24365888.github.io/dart-extends-and-implements/&quot;&gt;上一篇&lt;/a&gt;一起寫&lt;
      
    
    </summary>
    
    
      <category term="Dart" scheme="http://wst24365888.github.io/categories/Dart/"/>
    
    
      <category term="Dart" scheme="http://wst24365888.github.io/tags/Dart/"/>
    
      <category term="Extends" scheme="http://wst24365888.github.io/tags/Extends/"/>
    
      <category term="Abstract" scheme="http://wst24365888.github.io/tags/Abstract/"/>
    
      <category term="Mixin" scheme="http://wst24365888.github.io/tags/Mixin/"/>
    
      <category term="With" scheme="http://wst24365888.github.io/tags/With/"/>
    
  </entry>
  
  <entry>
    <title>淺談Dart中的Extends與Implements</title>
    <link href="http://wst24365888.github.io/dart-extends-and-implements/"/>
    <id>http://wst24365888.github.io/dart-extends-and-implements/</id>
    <published>2019-08-11T10:02:16.000Z</published>
    <updated>2019-09-09T13:22:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Extends"><a href="#Extends" class="headerlink" title="Extends"></a>Extends</h2><p>簡單來說就是繼承一個類別~</p><p>在Dart中，extends後面<strong>只能放一個類別</strong></p><p>看個例子</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vehicle</span> </span>&#123;<br>  <span class="hljs-comment">// 宣告屬性brand</span><br>  <span class="hljs-built_in">String</span> brand;<br>  <br>  <span class="hljs-comment">// 定義方法makeSomeNoise()</span><br>  <span class="hljs-keyword">void</span> makeSomeNoise();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Vehicle</span> </span>&#123;<br>  <span class="hljs-comment">// 繼承了尚未初始化的brand和尚未實作的方法makeSomeNoise()</span><br>  <span class="hljs-comment">// 方法必須先實作，屬性則不一定要動(不過我習慣會上個空字串&quot;&quot;)</span><br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-keyword">void</span> makeSomeNoise() &#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;WOOOOO&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SportsCar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Car</span> </span>&#123;<br>  <span class="hljs-comment">// 繼承了尚未初始化的brand和已實作的方法makeSomeNoise()</span><br>  <span class="hljs-comment">// 初始化brand</span><br>  <span class="hljs-built_in">String</span> brand = <span class="hljs-string">&quot;Benzzz&quot;</span>;<br>  <span class="hljs-comment">// 當然這邊也可以覆寫makeSomeNoise()</span><br>&#125;<br>  <br><span class="hljs-keyword">void</span> main() &#123;<br>  <br>  SportsCar myBenzzz = <span class="hljs-keyword">new</span> SportsCar();<br>  <span class="hljs-built_in">print</span>(myBenzzz.brand);<br>  myBenzzz.makeSomeNoise();<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>輸出:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Benzzz</span><br><span class="hljs-attribute">WOOOOO</span><br></code></pre></td></tr></table></figure><h2 id="Implements"><a href="#Implements" class="headerlink" title="Implements"></a>Implements</h2><p>功能類似extends</p><p>不過如果今天換作implements的話</p><p>方法要全部重新實作!!!</p><p>方法要全部重新實作!!!</p><p>方法要全部重新實作!!!</p><p>很重要說三遍</p><p>在Dart中，implements後面能加上多個類別</p><p>修改一下上面的例子</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Horn</span> </span>&#123;<br>  <span class="hljs-keyword">void</span> honk() &#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;BAAAAA&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SportsCar</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Car</span>, <span class="hljs-title">Horn</span> </span>&#123;<br>  <span class="hljs-comment">// 繼承了尚未初始化的brand和已實作的方法makeSomeNoise(), honk()</span><br>  <span class="hljs-built_in">String</span> brand = <span class="hljs-string">&quot;Benzzz&quot;</span>;<br>  <br>  <span class="hljs-comment">// 要重新實作所有方法</span><br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-keyword">void</span> makeSomeNoise() &#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;YEEEEEEEEE&quot;</span>);<br>  &#125;  <br>  <br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-keyword">void</span> honk() &#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;BALABALABA&quot;</span>);<br>  &#125;<br>&#125;<br>  <br><span class="hljs-keyword">void</span> main() &#123;<br>  <br>  SportsCar myBenzzz = <span class="hljs-keyword">new</span> SportsCar();<br>  <span class="hljs-built_in">print</span>(myBenzzz.brand);<br>  myBenzzz.makeSomeNoise();<br>  myBenzzz.honk();<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>輸出:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Benzzz</span><br><span class="hljs-attribute">YEEEEEEEEE</span><br><span class="hljs-attribute">BALABALABA</span><br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Extends&quot;&gt;&lt;a href=&quot;#Extends&quot; class=&quot;headerlink&quot; title=&quot;Extends&quot;&gt;&lt;/a&gt;Extends&lt;/h2&gt;&lt;p&gt;簡單來說就是繼承一個類別~&lt;/p&gt;
&lt;p&gt;在Dart中，extends後面&lt;strong&gt;只能放一個
      
    
    </summary>
    
    
      <category term="Dart" scheme="http://wst24365888.github.io/categories/Dart/"/>
    
    
      <category term="Dart" scheme="http://wst24365888.github.io/tags/Dart/"/>
    
      <category term="Extends" scheme="http://wst24365888.github.io/tags/Extends/"/>
    
      <category term="Implements" scheme="http://wst24365888.github.io/tags/Implements/"/>
    
      <category term="Abstract" scheme="http://wst24365888.github.io/tags/Abstract/"/>
    
  </entry>
  
  <entry>
    <title>隱私權條款</title>
    <link href="http://wst24365888.github.io/privacy/"/>
    <id>http://wst24365888.github.io/privacy/</id>
    <published>2019-07-24T11:38:55.000Z</published>
    <updated>2019-07-24T11:52:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>非常歡迎您使用本應用，為了讓您能夠安心的使用各項服務與資訊，特此向您說明我們的隱私權保護政策，以保障您的權益，請您詳閱下列內容：</p><h2 id="隱私權保護政策的適用範圍"><a href="#隱私權保護政策的適用範圍" class="headerlink" title="隱私權保護政策的適用範圍"></a>隱私權保護政策的適用範圍</h2><p>隱私權保護政策內容，包括本應用如何處理在您使用服務時收集到的個人識別資料。</p><p>隱私權保護政策不適用於本應用以外的相關連結應用，也不適用於非本應用所委託或參與管理的人員。</p><h2 id="個人資料的蒐集、處理及利用方式"><a href="#個人資料的蒐集、處理及利用方式" class="headerlink" title="個人資料的蒐集、處理及利用方式"></a>個人資料的蒐集、處理及利用方式</h2><p>當您使用本應用所提供之功能服務時，我們將視該服務功能性質，請您提供必要的個人資料，並在該特定目的範圍內處理及利用您的個人資料。</p><p>非經您書面同意，我們不會將個人資料用於其他用途。</p><p>本應用在您使用服務信箱、問卷調查等互動性功能時，會保留您所提供的姓名、電子郵件地址、聯絡方式及使用時間等。</p><p>於一般瀏覽時，伺服器會自行記錄相關行徑，包括您使用連線設備的IP位址、使用時間、使用的瀏覽器、瀏覽及點選資料記錄等，做為我們增進應用服務的參考依據，此記錄為內部應用，絕不對外公佈。</p><p>為提供精確的服務，我們會將收集的問卷調查內容進行統計與分析，分析結果之統計數據或說明文字呈現，除供內部研究外，我們會視需要公佈統計數據及說明文字，但不涉及特定個人之資料。</p><h2 id="資料之保護"><a href="#資料之保護" class="headerlink" title="資料之保護"></a>資料之保護</h2><p>我們的主機均設有防火牆、防毒系統等相關的各項資訊安全設備及必要的安全防護措施，藉此加以保護您個人資料。</p><p>只有經過授權的人員才能接觸您的個人資料，相關處理人員皆簽有保密合約，如有違反保密義務者，將會受到相關的法律處分。</p><p>如因業務需要有必要委託其他單位提供服務時，我們亦會嚴格要求其遵守保密義務，並且採取必要檢查程序以確定其將確實遵守。</p><h2 id="應用對外的相關連結"><a href="#應用對外的相關連結" class="headerlink" title="應用對外的相關連結"></a>應用對外的相關連結</h2><p>本應用的網頁提供其他應用的網路連結，您也可經由本應用所提供的連結，點選進入其他應用。</p><p>但該連結應用不適用我們的隱私權保護政策，您必須參考該連結應用中的隱私權保護政策。</p><h2 id="與第三人共用個人資料之政策"><a href="#與第三人共用個人資料之政策" class="headerlink" title="與第三人共用個人資料之政策"></a>與第三人共用個人資料之政策</h2><p>本應用絕不會提供、交換、出租或出售任何您的個人資料給其他個人、團體、私人企業或公務機關，但有法律依據或合約義務者，不在此限。</p><p>前項但書之情形包括不限於：</p><ul><li><p>經由您書面同意。</p></li><li><p>法律明文規定。</p></li><li><p>為免除您生命、身體、自由或財產上之危險。</p></li><li><p>與公務機關或學術研究機構合作，基於公共利益為統計或學術研究而有必要，且資料經過提供者處理或蒐集者依其揭露方式無從識別特定之當事人。</p></li><li><p>當您在應用的行為，違反服務條款或可能損害或妨礙應用與其他使用者權益或導致任何人遭受損害時，經應用管理單位研析揭露您的個人資料是為了辨識、聯絡或採取法律行動所必要者。</p></li><li><p>有利於您的權益。</p></li><li><p>本應用委託廠商協助蒐集、處理或利用您的個人資料時，將對委外廠商或個人善盡監督管理之責。</p></li></ul><h2 id="Cookie之使用"><a href="#Cookie之使用" class="headerlink" title="Cookie之使用"></a>Cookie之使用</h2><p>為了提供您最佳的服務，本應用會在您的電腦中放置並取用我們的Cookie。</p><p>若您不願接受Cookie的寫入，您可在您使用的瀏覽器功能項中設定隱私權等級為高，即可拒絕Cookie的寫入，但可能會導至本應用某些功能無法正常執行 。</p><h2 id="隱私權保護政策之修正"><a href="#隱私權保護政策之修正" class="headerlink" title="隱私權保護政策之修正"></a>隱私權保護政策之修正</h2><p>本應用隱私權保護政策將因應需求隨時進行修正，修正後的條款將立即刊登。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;非常歡迎您使用本應用，為了讓您能夠安心的使用各項服務與資訊，特此向您說明我們的隱私權保護政策，以保障您的權益，請您詳閱下列內容：&lt;/p&gt;
&lt;h2 id=&quot;隱私權保護政策的適用範圍&quot;&gt;&lt;a href=&quot;#隱私權保護政策的適用範圍&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
    
      <category term="Privacy" scheme="http://wst24365888.github.io/categories/Privacy/"/>
    
    
      <category term="Privacy" scheme="http://wst24365888.github.io/tags/Privacy/"/>
    
  </entry>
  
  <entry>
    <title>Xoops App Releases</title>
    <link href="http://wst24365888.github.io/xoops-app/"/>
    <id>http://wst24365888.github.io/xoops-app/</id>
    <published>2019-07-23T12:29:10.000Z</published>
    <updated>2019-08-06T04:30:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="最新版本"><a href="#最新版本" class="headerlink" title="最新版本"></a>最新版本</h2><ul><li><p><a href="xoops-app-latest-version.apk">直接下載最新版本 v1.1.2</a> (2019/08/06 釋出)</p></li><li><p>從<a href="https://play.google.com/store/apps/details?id=com.xyphuz.xoops_app">Play商店</a>安裝(因為須審核，所以版本更新上可能較慢)</p></li></ul><h2 id="使用說明"><a href="#使用說明" class="headerlink" title="使用說明"></a>使用說明</h2><p>下載完apk並安裝好後</p><p>打開「XOOPS網站」會進入設定頁面，如下</p><p><img src="4.png"></p><p>按下「掃描QR Code以進行設定」</p><p><img src="1.png"></p><p>並對準需要設定的網站中QR Code的區塊</p><p>(注意！這裡要安裝Tad Tools 3.2.8以上的網站才可能有此區塊)</p><p><img src="072.png"></p><p>如果出現下列任一種情況</p><ul><li>頁面跳轉</li></ul><p><img src="3.png"></p><ul><li>「網站名稱」和「Domain」都不是”unknown”</li></ul><p><img src="2.png"></p><p>就代表設定完成了~</p><h2 id="歷史版本"><a href="#歷史版本" class="headerlink" title="歷史版本"></a>歷史版本</h2><h3 id="v1-0-0-2019-07-23-釋出"><a href="#v1-0-0-2019-07-23-釋出" class="headerlink" title="v1.0.0 (2019/07/23 釋出)"></a>v1.0.0 (2019/07/23 釋出)</h3><ul><li><p>新增 - 支援tadnews</p></li><li><p>新增 - 支援tadgallery</p></li></ul><p><a href="xoops-app-version-1.0.0.apk">前往下載v1.0.0</a></p><h3 id="v1-1-2-2019-08-06-釋出"><a href="#v1-1-2-2019-08-06-釋出" class="headerlink" title="v1.1.2 (2019/08/06 釋出)"></a>v1.1.2 (2019/08/06 釋出)</h3><ul><li><p>新稱 - 支援tad_player</p></li><li><p>修復 - 掃描QR code時在某些情況下會當機的問題</p></li><li><p>修復 - tadnews中分類名稱過長導致overflow的問題</p></li><li><p>變更 - 返回鍵的功能改為回到上層或上一頁</p></li></ul><p><a href="xoops-app-version-1.1.2.apk">前往下載v1.1.2</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;最新版本&quot;&gt;&lt;a href=&quot;#最新版本&quot; class=&quot;headerlink&quot; title=&quot;最新版本&quot;&gt;&lt;/a&gt;最新版本&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;xoops-app-latest-version.apk&quot;&gt;直接下載最新版本 v1.1.
      
    
    </summary>
    
    
      <category term="Release" scheme="http://wst24365888.github.io/categories/Release/"/>
    
    
      <category term="Flutter" scheme="http://wst24365888.github.io/tags/Flutter/"/>
    
      <category term="Xoops" scheme="http://wst24365888.github.io/tags/Xoops/"/>
    
      <category term="App" scheme="http://wst24365888.github.io/tags/App/"/>
    
      <category term="Release" scheme="http://wst24365888.github.io/tags/Release/"/>
    
  </entry>
  
  <entry>
    <title>解決Flutter中Row與Column之Overflow的問題</title>
    <link href="http://wst24365888.github.io/flutter-row-column-overflow/"/>
    <id>http://wst24365888.github.io/flutter-row-column-overflow/</id>
    <published>2019-07-17T06:46:52.000Z</published>
    <updated>2019-09-09T06:18:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="防止Row中的東西Overflow"><a href="#防止Row中的東西Overflow" class="headerlink" title="防止Row中的東西Overflow"></a>防止Row中的東西Overflow</h2><p>這裡使用Expanded或Flexible都可以</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dart">child: Row(<br>  children: &lt;Widget&gt;[<br>    Expanded(<br>      child: Text(...),<br>    )<br>  ],<br>),<br></code></pre></td></tr></table></figure><h2 id="防止Column中的東西Overflow"><a href="#防止Column中的東西Overflow" class="headerlink" title="防止Column中的東西Overflow"></a>防止Column中的東西Overflow</h2><p>這裡使用SingleChildScrollView</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dart">child: SingleChildScrollView(<br>  child: Column(<br>    children: &lt;Widget&gt;[<br>      SomeWidget(),<br>      SomeWidget(),<br>      SomeWidget(),<br>    ],<br>  ),<br>),<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;防止Row中的東西Overflow&quot;&gt;&lt;a href=&quot;#防止Row中的東西Overflow&quot; class=&quot;headerlink&quot; title=&quot;防止Row中的東西Overflow&quot;&gt;&lt;/a&gt;防止Row中的東西Overflow&lt;/h2&gt;&lt;p&gt;這裡使用Expand
      
    
    </summary>
    
    
      <category term="Flutter" scheme="http://wst24365888.github.io/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="http://wst24365888.github.io/tags/Flutter/"/>
    
      <category term="Overflow" scheme="http://wst24365888.github.io/tags/Overflow/"/>
    
      <category term="Row" scheme="http://wst24365888.github.io/tags/Row/"/>
    
      <category term="Expanded" scheme="http://wst24365888.github.io/tags/Expanded/"/>
    
      <category term="Flexible" scheme="http://wst24365888.github.io/tags/Flexible/"/>
    
      <category term="Column" scheme="http://wst24365888.github.io/tags/Column/"/>
    
      <category term="SingleChildScrollView" scheme="http://wst24365888.github.io/tags/SingleChildScrollView/"/>
    
  </entry>
  
  <entry>
    <title>將Flutter App設置為全屏</title>
    <link href="http://wst24365888.github.io/flutter-full-screen/"/>
    <id>http://wst24365888.github.io/flutter-full-screen/</id>
    <published>2019-07-17T04:34:15.000Z</published>
    <updated>2020-08-02T03:32:47.188Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用SystemChrome"><a href="#用SystemChrome" class="headerlink" title="用SystemChrome"></a>用SystemChrome</h2><h3 id="引入services-dart"><a href="#引入services-dart" class="headerlink" title="引入services.dart"></a>引入services.dart</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/services.dart&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="修改整個app"><a href="#修改整個app" class="headerlink" title="修改整個app"></a>修改整個app</h3><p>在 <code>main()</code> 函數中加入</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> main() &#123;<br><br>  SystemChrome.setEnabledSystemUIOverlays([]);<br><br>  runApp(YourApp());<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;用SystemChrome&quot;&gt;&lt;a href=&quot;#用SystemChrome&quot; class=&quot;headerlink&quot; title=&quot;用SystemChrome&quot;&gt;&lt;/a&gt;用SystemChrome&lt;/h2&gt;&lt;h3 id=&quot;引入services-dart&quot;&gt;&lt;a h
      
    
    </summary>
    
    
      <category term="Flutter" scheme="http://wst24365888.github.io/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="http://wst24365888.github.io/tags/Flutter/"/>
    
      <category term="SystemChrome" scheme="http://wst24365888.github.io/tags/SystemChrome/"/>
    
  </entry>
  
  <entry>
    <title>在Flutter中固定方向</title>
    <link href="http://wst24365888.github.io/flutter-orientation/"/>
    <id>http://wst24365888.github.io/flutter-orientation/</id>
    <published>2019-07-17T04:21:01.000Z</published>
    <updated>2020-08-02T03:32:27.562Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用SystemChrome"><a href="#用SystemChrome" class="headerlink" title="用SystemChrome"></a>用SystemChrome</h2><h3 id="引入services-dart"><a href="#引入services-dart" class="headerlink" title="引入services.dart"></a>引入services.dart</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/services.dart&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="修改整個app"><a href="#修改整個app" class="headerlink" title="修改整個app"></a>修改整個app</h3><p>在 <code>main()</code> 函數中加入</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> main() &#123;<br><br>  SystemChrome.setPreferredOrientations([<br>    <span class="hljs-comment">//你要的方向</span><br>    DeviceOrientation.portraitUp,<br>    DeviceOrientation.portraitDown,<br>  ]);<br><br>  runApp(...);<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="修改單一頁面"><a href="#修改單一頁面" class="headerlink" title="修改單一頁面"></a>修改單一頁面</h3><p>在該頁面的 <code>initState()</code> 函數中加入</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-meta">@override</span><br><span class="hljs-keyword">void</span> initState() &#123;<br><br>  <span class="hljs-keyword">super</span>.initState();<br><br>  SystemChrome.setPreferredOrientations([<br>    <span class="hljs-comment">//你要的方向</span><br>    DeviceOrientation.landscapeRight,<br>    DeviceOrientation.landscapeLeft,<br>  ]);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在該頁面的 <code>dispose()</code> 函數中加入</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-meta">@override</span><br><span class="hljs-keyword">void</span> dispose() &#123;<br><br>  SystemChrome.setPreferredOrientations([<br>    <span class="hljs-comment">//代表遺棄時方向改為直立</span><br>    DeviceOrientation.portraitUp,<br>    DeviceOrientation.portraitDown,<br>  ]);<br><br>  <span class="hljs-keyword">super</span>.dispose();<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;用SystemChrome&quot;&gt;&lt;a href=&quot;#用SystemChrome&quot; class=&quot;headerlink&quot; title=&quot;用SystemChrome&quot;&gt;&lt;/a&gt;用SystemChrome&lt;/h2&gt;&lt;h3 id=&quot;引入services-dart&quot;&gt;&lt;a h
      
    
    </summary>
    
    
      <category term="Flutter" scheme="http://wst24365888.github.io/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="http://wst24365888.github.io/tags/Flutter/"/>
    
      <category term="SystemChrome" scheme="http://wst24365888.github.io/tags/SystemChrome/"/>
    
      <category term="Orientation" scheme="http://wst24365888.github.io/tags/Orientation/"/>
    
  </entry>
  
  <entry>
    <title>解決Flutter中Target of URI doesn&#39;t exist的問題</title>
    <link href="http://wst24365888.github.io/flutter-target-of-uri-does-not-exist/"/>
    <id>http://wst24365888.github.io/flutter-target-of-uri-does-not-exist/</id>
    <published>2019-07-16T02:53:26.000Z</published>
    <updated>2020-08-02T03:16:33.343Z</updated>
    
    <content type="html"><![CDATA[<p>才剛換個環境</p><p>結果就跑出令人頭痛的問題</p><p>所有引入的packages全部找不到，如圖</p><p><img src="070.png"></p><h2 id="用Flutter-Pub-Get"><a href="#用Flutter-Pub-Get" class="headerlink" title="用Flutter Pub Get"></a>用Flutter Pub Get</h2><p>輸入以下指令，再重開VS Code就解決啦~</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">flutter pub get<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;才剛換個環境&lt;/p&gt;
&lt;p&gt;結果就跑出令人頭痛的問題&lt;/p&gt;
&lt;p&gt;所有引入的packages全部找不到，如圖&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;070.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;用Flutter-Pub-Get&quot;&gt;&lt;a href=&quot;#用Flutter-Pub-G
      
    
    </summary>
    
    
      <category term="Flutter" scheme="http://wst24365888.github.io/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="http://wst24365888.github.io/tags/Flutter/"/>
    
      <category term="Packages" scheme="http://wst24365888.github.io/tags/Packages/"/>
    
      <category term="Pub" scheme="http://wst24365888.github.io/tags/Pub/"/>
    
  </entry>
  
  <entry>
    <title>安裝Flutter</title>
    <link href="http://wst24365888.github.io/install-flutter/"/>
    <id>http://wst24365888.github.io/install-flutter/</id>
    <published>2019-07-15T01:56:05.000Z</published>
    <updated>2020-08-02T03:31:11.120Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下載Flutter-SDK"><a href="#下載Flutter-SDK" class="headerlink" title="下載Flutter SDK"></a>下載Flutter SDK</h2><p>到 <a href="https://flutter.dev/docs/get-started/install">Flutter官網</a> 選擇你的平台</p><p>並開始下載 Flutter SDK</p><p><img src="052.png"></p><p>下載好了之後解壓到你要安裝的資料夾</p><h3 id="Dart-SDK"><a href="#Dart-SDK" class="headerlink" title="Dart SDK"></a>Dart SDK</h3><p>Flutter 是基於 Dart 語言開發的</p><p>所以理論上我們需要 Dart SDK</p><p>不過好消息是 Dart SDK 已經綁在 Flutter SDK 裡了，所以無需單獨下載</p><h3 id="配置環境變數"><a href="#配置環境變數" class="headerlink" title="配置環境變數"></a>配置環境變數</h3><p>這裡新增的路徑一律都指向 <code>bin</code> 資料夾</p><p><img src="055.png"></p><p><img src="058.png"></p><h3 id="Flutter-Doctor"><a href="#Flutter-Doctor" class="headerlink" title="Flutter Doctor"></a>Flutter Doctor</h3><p>配置環境變數之後隨時可以用這個指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">flutter doctor<br></code></pre></td></tr></table></figure><p>查看是否有那裡沒安裝好或是出問題</p><h2 id="安裝JDK"><a href="#安裝JDK" class="headerlink" title="安裝JDK"></a>安裝JDK</h2><p>到<a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html">甲骨文官網</a>下載你要的JDK版本</p><p>下載了之後照著他的指示安裝就可以了</p><h3 id="配置環境變數-1"><a href="#配置環境變數-1" class="headerlink" title="配置環境變數"></a>配置環境變數</h3><p><img src="057.png"></p><h2 id="安裝Android-Studio"><a href="#安裝Android-Studio" class="headerlink" title="安裝Android Studio"></a>安裝Android Studio</h2><p>到<a href="https://developer.android.com/studio">Android Studio官網</a>下載 Android Studio</p><p>之後照著指示安裝</p><h3 id="Android-SDK"><a href="#Android-SDK" class="headerlink" title="Android SDK"></a>Android SDK</h3><p>在新版的Android Studio安裝過程中</p><p>會提示你要不要裝哦</p><p>記得打勾就好(不過我記得預設就是打勾啦)</p><h3 id="安裝Android-Licenses"><a href="#安裝Android-Licenses" class="headerlink" title="安裝Android Licenses"></a>安裝Android Licenses</h3><p>輸入以下指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">flutter doctor --android-licenses<br></code></pre></td></tr></table></figure><p>就結束啦~</p><h3 id="創建模擬器"><a href="#創建模擬器" class="headerlink" title="創建模擬器"></a>創建模擬器</h3><p>這裡要來創建一個AVD虛擬機</p><p>也就是在測試時看到的手機畫面</p><p>先到這個畫面，找到 <strong>Configure</strong> 點下去</p><p><img src="060.png"></p><p>選AVD Manager</p><p><img src="061.png"></p><p>接下來就照著提示創建一台虛擬機吧！</p><p><img src="062.png"></p><p>到了按 <strong>Finish</strong> 之後才是真正完成哦~</p><p><img src="063.png"></p><p>按下 <strong>Launch</strong> 可以啟動測試看看是否正常運行</p><p><img src="065.png"></p><p><img src="064.png"></p><h3 id="安裝語言外掛"><a href="#安裝語言外掛" class="headerlink" title="安裝語言外掛"></a>安裝語言外掛</h3><p>先到這個畫面，找到 <strong>Configure</strong> 點下去</p><p><img src="060.png"></p><p>這次換成 <strong>Plugins</strong></p><p><img src="061.png"></p><p>搜尋 <strong>Flutter</strong>(記得要大寫)，然後點安裝</p><p><img src="066.png"></p><p>這步他會提示你要連同 <strong>Dart</strong> 的外掛一起裝，這裡一直按是就好了</p><p>裝好之後重開會如圖，這樣就完成啦~</p><p><img src="067.png"></p><h2 id="編輯器"><a href="#編輯器" class="headerlink" title="編輯器"></a>編輯器</h2><p>這裡可以選擇你要用VS Code編輯，還是Android Studio編輯就好</p><p>這裡我是用VS Code</p><p>所以來安裝個也來安裝個語言外掛</p><p>如圖，Install給他按下去，94簡單</p><p><img src="068.png"></p><h2 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成"></a>大功告成</h2><p>一樣輸入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">flutter doctor --android-licenses<br></code></pre></td></tr></table></figure><p>如果只剩這個問題的話，代表你成功啦！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[!] Connected device<br>    ! No devices available<br></code></pre></td></tr></table></figure><p>只要用USB線插上你的設備(手機端記得開偵錯)</p><p>或者是用剛剛建立的AVD虛擬機就可以解決這個問題了~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;下載Flutter-SDK&quot;&gt;&lt;a href=&quot;#下載Flutter-SDK&quot; class=&quot;headerlink&quot; title=&quot;下載Flutter SDK&quot;&gt;&lt;/a&gt;下載Flutter SDK&lt;/h2&gt;&lt;p&gt;到 &lt;a href=&quot;https://flutter
      
    
    </summary>
    
    
      <category term="Flutter" scheme="http://wst24365888.github.io/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="http://wst24365888.github.io/tags/Flutter/"/>
    
      <category term="Install" scheme="http://wst24365888.github.io/tags/Install/"/>
    
  </entry>
  
  <entry>
    <title>Flutter中隱藏某視窗</title>
    <link href="http://wst24365888.github.io/flutter-hide-widget/"/>
    <id>http://wst24365888.github.io/flutter-hide-widget/</id>
    <published>2019-07-03T10:39:57.000Z</published>
    <updated>2019-09-09T06:18:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用Visibility包軌"><a href="#用Visibility包軌" class="headerlink" title="用Visibility包軌"></a>用Visibility包軌</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart">Visibility(<br>  visible: _isVisible,<br>  child: SomeWidget(),<br>),<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;用Visibility包軌&quot;&gt;&lt;a href=&quot;#用Visibility包軌&quot; class=&quot;headerlink&quot; title=&quot;用Visibility包軌&quot;&gt;&lt;/a&gt;用Visibility包軌&lt;/h2&gt;&lt;figure class=&quot;highlight dart
      
    
    </summary>
    
    
      <category term="Flutter" scheme="http://wst24365888.github.io/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="http://wst24365888.github.io/tags/Flutter/"/>
    
      <category term="Visibility" scheme="http://wst24365888.github.io/tags/Visibility/"/>
    
      <category term="Hide" scheme="http://wst24365888.github.io/tags/Hide/"/>
    
      <category term="Widget" scheme="http://wst24365888.github.io/tags/Widget/"/>
    
  </entry>
  
  <entry>
    <title>解決Flutter中SingleChildScrollView在Column底下無法運作的問題</title>
    <link href="http://wst24365888.github.io/flutter-singlechildscrollview-in-column/"/>
    <id>http://wst24365888.github.io/flutter-singlechildscrollview-in-column/</id>
    <published>2019-07-03T09:53:23.000Z</published>
    <updated>2019-07-03T09:55:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用Expanded包住SingleChildScrollView"><a href="#用Expanded包住SingleChildScrollView" class="headerlink" title="用Expanded包住SingleChildScrollView"></a>用Expanded包住SingleChildScrollView</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dart">Column(<br>  children: &lt;Widget&gt;[<br>    Expanded(<br>      child: SingleChildScrollView(),<br>    )<br>  ],<br>),<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;用Expanded包住SingleChildScrollView&quot;&gt;&lt;a href=&quot;#用Expanded包住SingleChildScrollView&quot; class=&quot;headerlink&quot; title=&quot;用Expanded包住SingleChildScroll
      
    
    </summary>
    
    
      <category term="Flutter" scheme="http://wst24365888.github.io/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="http://wst24365888.github.io/tags/Flutter/"/>
    
      <category term="Expanded" scheme="http://wst24365888.github.io/tags/Expanded/"/>
    
      <category term="Column" scheme="http://wst24365888.github.io/tags/Column/"/>
    
      <category term="SingleChildScrollView" scheme="http://wst24365888.github.io/tags/SingleChildScrollView/"/>
    
  </entry>
  
  <entry>
    <title>在Flutter中換頁</title>
    <link href="http://wst24365888.github.io/flutter-change-page/"/>
    <id>http://wst24365888.github.io/flutter-change-page/</id>
    <published>2019-07-03T08:37:56.000Z</published>
    <updated>2019-07-03T08:57:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用Navigator-push"><a href="#使用Navigator-push" class="headerlink" title="使用Navigator.push"></a>使用Navigator.push</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart">Navigator.push(<br>    context,<br>    MaterialPageRoute(builder: (context) =&gt; ThePageYouWantToGo()),<br>);<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;使用Navigator-push&quot;&gt;&lt;a href=&quot;#使用Navigator-push&quot; class=&quot;headerlink&quot; title=&quot;使用Navigator.push&quot;&gt;&lt;/a&gt;使用Navigator.push&lt;/h2&gt;&lt;figure class=&quot;hi
      
    
    </summary>
    
    
      <category term="Flutter" scheme="http://wst24365888.github.io/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="http://wst24365888.github.io/tags/Flutter/"/>
    
      <category term="Navigator" scheme="http://wst24365888.github.io/tags/Navigator/"/>
    
  </entry>
  
  <entry>
    <title>Flutter中配置BottomNavigationBar的顏色</title>
    <link href="http://wst24365888.github.io/flutter-bottomnavigationbar-color/"/>
    <id>http://wst24365888.github.io/flutter-bottomnavigationbar-color/</id>
    <published>2019-07-03T08:26:38.000Z</published>
    <updated>2019-07-03T08:32:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用Theme"><a href="#使用Theme" class="headerlink" title="使用Theme"></a>使用Theme</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dart">Theme(<br>  data: Theme.of(context).copyWith(<br>    <span class="hljs-comment">// background color</span><br>    canvasColor: Colors.black<br>  )),<br>  child: BottomNavigationBar(),<br>)<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;使用Theme&quot;&gt;&lt;a href=&quot;#使用Theme&quot; class=&quot;headerlink&quot; title=&quot;使用Theme&quot;&gt;&lt;/a&gt;使用Theme&lt;/h2&gt;&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
    
      <category term="Flutter" scheme="http://wst24365888.github.io/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="http://wst24365888.github.io/tags/Flutter/"/>
    
      <category term="BottomNavigationBar" scheme="http://wst24365888.github.io/tags/BottomNavigationBar/"/>
    
      <category term="Color" scheme="http://wst24365888.github.io/tags/Color/"/>
    
  </entry>
  
  <entry>
    <title>Flutter中使Widget變為可點擊</title>
    <link href="http://wst24365888.github.io/flutter-make-widget-clickable/"/>
    <id>http://wst24365888.github.io/flutter-make-widget-clickable/</id>
    <published>2019-07-03T08:12:42.000Z</published>
    <updated>2019-09-09T06:18:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用GestureDetector包起來"><a href="#用GestureDetector包起來" class="headerlink" title="用GestureDetector包起來"></a>用GestureDetector包起來</h2><p>除此之外，GestureDetector還能偵測很多手勢哦</p><p>至於有什麼其他手勢大家就自己探索了~</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart">GestureDetector(<br>  onTap: _yourAction,<br>  child: SomeWidget(),<br>)<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;用GestureDetector包起來&quot;&gt;&lt;a href=&quot;#用GestureDetector包起來&quot; class=&quot;headerlink&quot; title=&quot;用GestureDetector包起來&quot;&gt;&lt;/a&gt;用GestureDetector包起來&lt;/h2&gt;&lt;p&gt;除此
      
    
    </summary>
    
    
      <category term="Flutter" scheme="http://wst24365888.github.io/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="http://wst24365888.github.io/tags/Flutter/"/>
    
      <category term="Widget" scheme="http://wst24365888.github.io/tags/Widget/"/>
    
      <category term="Card" scheme="http://wst24365888.github.io/tags/Card/"/>
    
      <category term="GestureDetector" scheme="http://wst24365888.github.io/tags/GestureDetector/"/>
    
  </entry>
  
  <entry>
    <title>Hexo &amp; RSS</title>
    <link href="http://wst24365888.github.io/hexo-rss/"/>
    <id>http://wst24365888.github.io/hexo-rss/</id>
    <published>2019-07-01T02:36:39.000Z</published>
    <updated>2020-08-02T03:26:19.489Z</updated>
    
    <content type="html"><![CDATA[<p>7月了，好熱…</p><h2 id="安裝套件"><a href="#安裝套件" class="headerlink" title="安裝套件"></a>安裝套件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-generator-feed<br></code></pre></td></tr></table></figure><h2 id="修改站點配置"><a href="#修改站點配置" class="headerlink" title="修改站點配置"></a>修改站點配置</h2><p>到部落格<strong>根目錄</strong>底下的 <code>_config.yml</code> 修改配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#RSS</span><br><span class="hljs-attr">plugin:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">hexo-generator-feed</span><br><span class="hljs-comment">#Feed Atom</span><br><span class="hljs-attr">feed:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">atom</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">atom.xml</span><br>  <span class="hljs-attr">limit:</span> <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><h2 id="修改主題配置"><a href="#修改主題配置" class="headerlink" title="修改主題配置"></a>修改主題配置</h2><p>如果你使用的主題裡有RSS相關的設定，記得要配置一下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">rss:</span> <span class="hljs-string">/atom.xml</span><br></code></pre></td></tr></table></figure><h2 id="發布"><a href="#發布" class="headerlink" title="發布"></a>發布</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g -d<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;7月了，好熱…&lt;/p&gt;
&lt;h2 id=&quot;安裝套件&quot;&gt;&lt;a href=&quot;#安裝套件&quot; class=&quot;headerlink&quot; title=&quot;安裝套件&quot;&gt;&lt;/a&gt;安裝套件&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://wst24365888.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://wst24365888.github.io/tags/Hexo/"/>
    
      <category term="RSS" scheme="http://wst24365888.github.io/tags/RSS/"/>
    
  </entry>
  
  <entry>
    <title>將Hexo部屬到GitHub</title>
    <link href="http://wst24365888.github.io/hexo-github/"/>
    <id>http://wst24365888.github.io/hexo-github/</id>
    <published>2019-06-29T13:28:17.000Z</published>
    <updated>2020-08-02T03:29:33.607Z</updated>
    
    <content type="html"><![CDATA[<p>打完標題才發現GitHub的H應該要是大寫XD</p><h2 id="創建新倉庫"><a href="#創建新倉庫" class="headerlink" title="創建新倉庫"></a>創建新倉庫</h2><p>登入你的Github，然後創建一個新的倉庫(New Repository)</p><p><strong>倉庫名稱為: 你的Github用戶名.github.io</strong></p><p>這是固定寫法</p><h2 id="安裝Git"><a href="#安裝Git" class="headerlink" title="安裝Git"></a>安裝Git</h2><p>如果你還沒安裝Git，到<a href="https://git-scm.com/downloads">這裡</a>安裝</p><h2 id="綁定Github"><a href="#綁定Github" class="headerlink" title="綁定Github"></a>綁定Github</h2><p>輸入指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;你的Github用戶名&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;你註冊GitHub的電子信箱&quot;</span><br></code></pre></td></tr></table></figure><h2 id="生成密鑰"><a href="#生成密鑰" class="headerlink" title="生成密鑰"></a>生成密鑰</h2><p>輸入指令，接下來都按Enter就好</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;你註冊GitHub的電子信箱&quot;</span><br></code></pre></td></tr></table></figure><p>這裡會生成一個名為 <code>id_rsa.pub</code> 的SSH密鑰文件</p><p>主要使用非對稱加密來驗證你是否為合法用戶</p><p>不然大家都可以隨意上傳就天下大亂啦~</p><h2 id="到Github新建SSH-Key"><a href="#到Github新建SSH-Key" class="headerlink" title="到Github新建SSH Key"></a>到Github新建SSH Key</h2><h3 id="複製Key"><a href="#複製Key" class="headerlink" title="複製Key"></a>複製Key</h3><p>找到剛剛生成的 <code>id_rsa.pub</code> (有點難找，通常在 <code>C:/Users/你的使用者名稱/.ssh</code> 底下，MacOS 我就不確定了QQ)</p><p>把裡面的內容”全部”複製</p><h3 id="新建SSH-Key"><a href="#新建SSH-Key" class="headerlink" title="新建SSH Key"></a>新建SSH Key</h3><p>接著到<a href="https://github.com/settings/keys">這裡</a>點 <strong>New SSH Key</strong></p><p>進入頁面之後(如圖)</p><p><img src="049.png"></p><p>Title隨便打</p><p>Key的欄位則貼上剛剛複製的東西</p><p>然後愉快的送出~</p><h3 id="檢查"><a href="#檢查" class="headerlink" title="檢查"></a>檢查</h3><p>輸入指令後，可以檢查GitHub那邊公鑰是否設置成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh git@github.com<br></code></pre></td></tr></table></figure><p>印象中只要看到什麼 <code>successfully authenticated</code> 就代表你成功了</p><h2 id="安裝Hexo的Git部屬套件"><a href="#安裝Hexo的Git部屬套件" class="headerlink" title="安裝Hexo的Git部屬套件"></a>安裝Hexo的Git部屬套件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git<br></code></pre></td></tr></table></figure><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>到部落格<strong>根目錄</strong>下的 <code>_config.yml</code> 文件，並修改為下述的樣子</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span> <br>    <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>    <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/你的Github用戶名/你的Github用戶名.github.io</span>    <span class="hljs-comment">#簡單來說就是你的倉庫網址</span><br>    <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><h2 id="建立靜態檔案並發布"><a href="#建立靜態檔案並發布" class="headerlink" title="建立靜態檔案並發布"></a>建立靜態檔案並發布</h2><p>是的，最重要的發布XD</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g -d<br></code></pre></td></tr></table></figure><h2 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成"></a>大功告成</h2><p>接著就能到 https://你的Github用戶名.github.io 看到你的成果啦~</p><p>至於更進一步想要綁定域名的話</p><p>我自己也還沒實作</p><p>之後如果有空的話會來做做看</p><p>或許也會寫一篇文章~</p><p>就請大家拭目以待了!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;打完標題才發現GitHub的H應該要是大寫XD&lt;/p&gt;
&lt;h2 id=&quot;創建新倉庫&quot;&gt;&lt;a href=&quot;#創建新倉庫&quot; class=&quot;headerlink&quot; title=&quot;創建新倉庫&quot;&gt;&lt;/a&gt;創建新倉庫&lt;/h2&gt;&lt;p&gt;登入你的Github，然後創建一個新的倉庫(New R
      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://wst24365888.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://wst24365888.github.io/tags/Hexo/"/>
    
      <category term="Git" scheme="http://wst24365888.github.io/tags/Git/"/>
    
      <category term="GitHub" scheme="http://wst24365888.github.io/tags/GitHub/"/>
    
  </entry>
  
</feed>
